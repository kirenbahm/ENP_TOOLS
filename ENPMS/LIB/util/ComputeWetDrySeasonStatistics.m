function ComputeWetDrySeasonStatistics(INI)
% Reads the _MonthlyStats.dfs2 file generated by preceeding functions to
% find Stage Statistics. Iterates through data to find Statistics for each
% complete period between June 1 - Oct 31 and between Nov 1 and May 31 for all avaiable data.
% Writes the Statistics to a Non Equidistant Time Step dfs2 file where the time steps are the 
% start of each complete Wet or Dry Season.
% Import Statements
NET.addAssembly('DHI.Generic.MikeZero.DFS');
import DHI.Generic.MikeZero.DFS.*;
import DHI.Generic.MikeZero.DFS.dfs0.*;
NET.addAssembly('DHI.Generic.MikeZero.EUM');
NET.addAssembly('DHI.Generic.MikeZero.DFS');
H = NETaddDfsUtil();
eval('import DHI.Generic.MikeZero.DFS.*');
eval('import DHI.Generic.MikeZero.DFS.dfs123.*');
eval('import DHI.Generic.MikeZero.*');

fprintf('\n------------------------------------');
fprintf('\nBeginning ComputeWetDrySeasonStatistics    (%s)',datestr(now));
fprintf('\n------------------------------------');
format compact

%Open Monthly Stats file and save metadata
dfs2Monthly = Dfs2File(DfsFileFactory.DfsGenericOpen(INI.fileMonthlyStats));
search = '';
itemStage = -1;
% Find Mean water level item
field = System.String('mean water level');
while ~strcmp(char(search), char(field))  && itemStage < dfs2Monthly.ItemInfo.Count
    itemStage = (itemStage + 1);
    search = dfs2Monthly.ItemInfo.Item(itemStage).Name;
end
ProjWktString = dfs2Monthly.FileInfo.Projection.WKTString;
ProjLong = dfs2Monthly.FileInfo.Projection.Longitude;
ProjLat = dfs2Monthly.FileInfo.Projection.Latitude;
ProjOri = dfs2Monthly.FileInfo.Projection.Orientation;
HeadMetaData = dfs2Monthly.ItemInfo.Item(itemStage);
TimeAxis = dfs2Monthly.FileInfo.TimeAxis;
TimeStart = dfs2Monthly.FileInfo.TimeAxis.StartDateTime;

% Parse file start and end DateTime
StartDateTime = datetime(TimeStart.Year, TimeStart.Month, TimeStart.Day, TimeStart.Hour, TimeStart.Minute, TimeStart.Second);
EndDateTime = StartDateTime + TimeAxis.TimeSpan / 86400;

% Find Start of First Complete Wet or Dry Season
% If first file Time step Occurs after 1st of November or June, then the
% first complete season is the next Wet or Dry Seaon, respectively
if StartDateTime.Month == 11  && StartDateTime.Day == 1 % If StartDateTime is start of dry season do nothing
elseif StartDateTime.Month == 6 && StartDateTime.Day == 1 % If StartDateTime is start of wet season do nothing
elseif StartDateTime.Month >= 6 && StartDateTime.Month <= 10 % If StartDateTime is mid wet season
    StartDateTime = datetime(StartDateTime.Year, 11, 1,0,0,0); % Then first complete is start year dry season 
else % If the date is not exactly the start of wet or dry seaon and is not mid wet season, then it is mid dry season
    if StartDateTime.Month == 11 || StartDateTime.Month == 12 % If Nov or Dec
        StartDateTime = datetime(StartDateTime.Year + 1, 6, 1,0,0,0); %  Then first complete season is next year's wet season
    else % Else the date is mid dry season between Jan and May
        StartDateTime = datetime(StartDateTime.Year, 6, 1,0,0,0); %  Then first complete season is start year's wet season
    end
end

% Find End of Last Complete Month
% If last file Time step Occurs before end of month, then the last complete
% month is end of previous month
if EndDateTime.Month == 5 && EndDateTime.Day == 31 % If EndDateTime is end of dry season do nothing
elseif EndDateTime.Month == 10 && EndDateTime.Day == 31 % If EndDateTime is end of wet season do nothing
elseif EndDateTime.Month >= 6 && EndDateTime.Month <= 10 % If EndDateTime is mid wet season
    EndDateTime = datetime(EndDateTime.Year, 5, 31,0,0,0); % Then last complete is previous dry season 
else % If the date is not exactly the end of wet or dry seaon and is not mid wet season, then it is mid dry season
    if EndDateTime.Month >= 1 && EndDateTime.Month <= 5 % If Jan - May
        EndDateTime = datetime(EndDateTime.Year - 1, 10, 31,0,0,0); %  Then last complete season is previous year's wet season
    else % Else the date is mid dry season between Nov - Dec
        EndDateTime = datetime(EndDateTime.Year, 10, 31,0,0,0); %  Then last complete season is end year's wet season
    end
end

% If no complete Months, report and end script
if EndDateTime - StartDateTime <= 0
    fprintf('ERROR generating Monthly Stats - No Complete Wet or Dry Season.\n');
    return;
end

% Create output file
% set file metadata
factory = DfsFactory();
builder = Dfs2Builder.Create(char("Monthly Statistics"),'Matlab DFS',0);
builder.SetDataType(0);
builder.DeleteValueDouble = -1e-35;
builder.SetGeographicalProjection(factory.CreateProjectionGeoOrigin(ProjWktString,ProjLong,ProjLat,ProjOri));
builder.SetTemporalAxis(factory.CreateTemporalNonEqCalendarAxis...
    (eumUnit.eumUsec,System.DateTime(StartDateTime.Year,StartDateTime.Month,StartDateTime.Day,0,0,0)));
builder.SetSpatialAxis(dfs2Monthly.SpatialAxis);

% add output Item
builder.AddDynamicItem(System.String('mean water level'), ...
    HeadMetaData.Quantity, ...
    HeadMetaData.DataType, HeadMetaData.ValueType);

builder.CreateFile(INI.fileWetDrySeasonStats);
dfs2Out = Dfs2File(builder.GetFile());
clear ProjWktString ProjLong ProjLat ProjOri HeadMetaData;

% Initialize Variable for calculations and Outputs
nG = dfs2Out.SpatialAxis.XCount * dfs2Out.SpatialAxis.YCount; % Spatial Axis Grid Size
AverageStage = zeros(1, nG);% 1D  Array for writing Output Stage
% Iteration variables
noData = dfs2Monthly.FileInfo.DeleteValueFloat; % No data value for file
CurrentYear = StartDateTime.Year; % Current Wet/Dry Season Start Year
CurrentMonth = StartDateTime.Month; % Current Wet/Dry Season Start Month
D0 = datetime(TimeStart.Year, TimeStart.Month, TimeStart.Day, TimeStart.Hour,...
    TimeStart.Minute, TimeStart.Second);% First File Time Step DateTime
WriteTime = 0;% Elapsed Time for Output TimeStep
try
    % Loop through all time steps, plus one
    % Runs 1 extra iteration that is caught in order to add final Month
    % values into output file before exiting loop.
    for ts = 0:TimeAxis.NumberOfTimeSteps
        if mod(ts,12) == 0 % print running update to Command Window
            fprintf('\n      reading step %i%s%i and counting',ts+1, '/', TimeAxis.NumberOfTimeSteps);
        end
        % If final timestep, add one month to current time step to trigger
        % output file write
        if ts == TimeAxis.NumberOfTimeSteps 
            currentDateTime = currentDateTime + 31;
        else % Else calculate time step as normal
            StageData3D = dfs2Monthly.ReadItemTimeStep(itemStage + 1, ts);
            currentDateTime = D0 + StageData3D.Time / 86400;
        end
        % Triggers on either Season's end
        % Current Year and Month will be equal to Wet/Dry Season start
        % Thus:
        % If the timeStep Month is June and Season start month was Nov OR
        % If the timeStep Month is Nov and Season start month was June
        if (currentDateTime.Month == 6 && CurrentMonth == 11) ||...
                (currentDateTime.Month == 11 && CurrentMonth == 6) 
            if CurrentMonth == 11 % Days in Dry Season
                daysinseason = days(datetime(CurrentYear + 1, 5,31,0,0,0) - datetime(CurrentYear,11,1,0,0,0)) + 1;
            else % days in wet season
                daysinseason = days(datetime(CurrentYear, 10,31,0,0,0) - datetime(CurrentYear,6,1,0,0,0)) + 1;
            end
            AverageStage = AverageStage / daysinseason; % Summed Stages divided by number of days
            WriteToGrid = HeadArray == noData; % Find indexes outside domain where noData values are
            AverageStage(WriteToGrid) = noData; % Set values at indexes to noData Values
            % Write Output Array to Output dfs2 file
            dfs2Out.WriteItemTimeStepNext(WriteTime, NET.convertArray(single(AverageStage(:))));
            AverageStage = zeros(1, nG); % reset array for calculating Monthly statistics
            CurrentMonth = currentDateTime.Month; % Set calculation cut off with new Season Start Month
            CurrentYear = currentDateTime.Year; % Set calculation cut off with new Season Start Year
            WriteTime = seconds(currentDateTime - StartDateTime);% Find elapsed time from start to current
            if ts == TimeAxis.NumberOfTimeSteps % if final loop iteration, break loop
                break;
            end
        elseif StartDateTime - currentDateTime > 0 % If currentDateTime is before StartDateTime
            continue ; % If timestep was before first complete Wet or Dry Season, skip iteration
        elseif EndDateTime - currentDateTime < 0 % If currentDateTime is after EndDateTime
            break; % If timestep was after last complete Wet or Dry Season, skip iteration
        end
         % 3d array with depths
        HeadArray = double(StageData3D.Data); % convert to 1D array
        % Calculate Stage for month using average and #days in month
        MonthHead = (HeadArray * calc_DaysInMonth(currentDateTime.Year, currentDateTime.Month));
        % Add to average Stage to get total average for season later 
        AverageStage = AverageStage + MonthHead; 
    end
    dfs2Out.Close();
    dfs2Monthly.Close();
    fprintf('\n      Wet/Dry Season Statistics Successfully Generated.\n');
catch ME
    fprintf('ERROR generating Wet-Dry Season Stats.\n');
    fprintf('-- %s.\n', ME.message);
    dfs2Out.Close();
    dfs2Monthly.Close();
    delete(INI.fileWetDrySeasonStats);
end
clear AverageStage AverageDepth DisConHydroPeriod DisConHydroPeriodMeanDepth WriteToGrid;
clear MaxConHydroPeriod MaxConHydroPeriodMeanDepth CurrentConHydroPeriod CurrentConHydroPeriodMeanDepth;

end